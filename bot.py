import telebot
from telebot import types
from dnevnikc import *
from datetime import datetime
import os
from dotenv import load_dotenv
import db
import json

load_dotenv()
tgtoken = os.getenv('TOKEN')
bot = telebot.TeleBot(tgtoken)

week = None
weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']


def buttons(message):
    temp = db.get(message.chat.id)
    if temp != None:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        d = dnevnik(temp)
        temp = d.profile()
        b1 = types.KeyboardButton(
            "üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ "+str(temp['classInfo']['number'])+temp['classInfo']['litera'])
        b2 = types.KeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞")
        b3 = types.KeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è")
        b4 = types.KeyboardButton("üìã –û—Ü–µ–Ω–∫–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ")
        b5 = types.KeyboardButton("üìã –í—Å–µ –æ—Ü–µ–Ω–∫–∏")
        b6 = types.KeyboardButton("üìÑ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")
        markup.add(b1).row(b2, b3).row(b5).row(b4).row(b6)
        return markup
    else:
        return types.ReplyKeyboardRemove()


@bot.message_handler(commands=['pgrades'])
def get_grades_year(message):
    temp = db.get(message.chat.id)
    if temp != None:
        d = dnevnik(temp)
        res = ''
        for i in d.grades_year():
            for j in range(4):
                if i['grades'][j] == None:
                    i['grades'][j] = '‚îÅ'
            if i['yeargrade'] == None:
                i['yeargrade'] = '‚îÅ'
            res += i['name']+'\n‚îî '+i['grades'][0]+' ‚Ä¢ '+i['grades'][1]+' ‚Ä¢ ' + \
                i['grades'][2]+' ‚Ä¢ '+i['grades'][3] + \
                '   –ò—Ç–æ–≥: '+i['yeargrade']+'\n'
        if res != '':
            res = '–ß–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏\n\n'+res
            bot.send_message(message.chat.id, res, reply_markup=buttons(message))
        else:
            bot.send_message(message.chat.id, '–û—Ü–µ–Ω–æ–∫ –≤ —á–µ—Ç–≤–µ—Ä—Ç—è—Ö –ø–æ–∫–∞ –Ω–µ—Ç', reply_markup=buttons(message))
    else:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg')
        markup.add(b1)
        bot.send_message(
            message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã', reply_markup=markup)


def get_grades_period(message, period):
    temp = db.get(message.chat.id)
    if temp != None:
        d = dnevnik(temp)
        res = ''
        for i in d.grades_period(period):
            temp = ''
            if i['grades'] != []:
                for j in i['grades']:
                    for u in j[:-1]:
                        temp += u+'/'
                    temp += j[-1]+' ‚Ä¢ '
            if temp == '':
                res += i['name']+'\n‚îî –ù–µ—Ç –æ—Ü–µ–Ω–æ–∫\n'
            else:
                res += i['name']+" ‚Ä¢ " + \
                    str(round(i['averagew'], 2))+"\n‚îî "+temp[:-2]+'\n'
        if res == '':
            res = ['–í', '–í–æ', '–í', '–í'][period]+' ' + \
                str(period+1)+' —á–µ—Ç–≤–µ—Ä—Ç–∏ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫'
        else:
            res = str(period+1)+' —á–µ—Ç–≤–µ—Ä—Ç—å\n\n'+res
        bot.send_message(message.chat.id, res, reply_markup=buttons(message))
    else:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg')
        markup.add(b1)
        bot.send_message(
            message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã', reply_markup=markup)


@bot.message_handler(commands=['wgrades'])
def get_grades_week(message):
    temp = db.get(message.chat.id)
    if temp != None:
        d = dnevnik(temp)
        res = ''
        gr = d.grades_week()
        for i in gr:
            res += i+'\n‚îî '
            for j in gr[i]:
                res += '/'.join(str(x) for x in j)+" ‚Ä¢ "
            res = res[:-2]+'\n'
        if res == '':
            res = '–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫'
        else:
            res = '–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è\n\n'+res
        bot.send_message(message.chat.id, res)
    else:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg')
        markup.add(b1)
        bot.send_message(
            message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã', reply_markup=markup)


@bot.message_handler(commands=['start'])
def start_message(message):
    temp = db.get(message.chat.id)
    if temp == None:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton(
            "üìÑ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data='help')
        b2 = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg')
        markup.add(b1).row(b2)
        bot.send_message(
            message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º', reply_markup=markup)
    else:
        b1 = types.InlineKeyboardButton(
            "üìÑ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data='help')
        markup = types.InlineKeyboardMarkup()
        markup.add(b1)
        bot.send_message(
            message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã", reply_markup=markup)


@bot.message_handler(commands=['login'])
def login(message):
    if db.get(message.chat.id) == None:
        webapp = types.WebAppInfo("https://zasdc.ru/static/bot/login.html")
        b1 = types.KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", web_app=webapp)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
        markup.add(b1)
        bot.send_message(
            message.chat.id, "–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É\\. \n–¢–∞–∫–∂–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏—Ç–µ [–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é](https://telegra.ph/Instrukciya-dlya-registracii-10-25)", reply_markup=markup, parse_mode='MarkdownV2')
    else:
        b1 = types.InlineKeyboardButton(
            "üìÑ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data='help')
        markup = types.InlineKeyboardMarkup()
        markup.add(b1)
        bot.send_message(
            message.chat.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã", reply_markup=buttons(message))


@bot.message_handler(content_types="web_app_data")
def logindata(message):
    temp = json.loads(message.web_app_data.data)
    d = dnevnik((temp['accessToken'], temp['refreshToken']))
    temp = d.refresh()
    if temp == False:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton(
            "‚úèÔ∏è –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='reg')
        markup.add(b1)
        bot.send_message(
            message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≥–æ", reply_markup=markup)
    else:
        db.add(message.chat.id, temp[0], temp[1])
        b1 = types.InlineKeyboardButton(
            "üìÑ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data='help')
        markup = types.InlineKeyboardMarkup()
        markup.add(b1)
        bot.send_message(
            message.chat.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', reply_markup=markup)


def schedule(message, day):
    temp = db.get(message.chat.id)
    if temp != None:
        d = dnevnik(temp)
        sch = d.schedule(day)
        res = weekdays[day]+'\n\n'
        if sch != 0:
            for i in sch:
                res += i['num']+' | '+i['name']+" "+i['room']+"\n"
        else:
            res += "–£—Ä–æ–∫–æ–≤ –Ω–µ—Ç"
        bot.send_message(message.chat.id, res)
    else:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg')
        markup.add(b1)
        bot.send_message(
            message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã', reply_markup=markup)


@bot.message_handler(commands=['help'])
def help(message):
    msg = 'üõ†–°–µ—Ä–≤–∏—Å\n/login - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n/help - –≠—Ç–æ –º–µ–Ω—é\n/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ\n/delacc - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –≤ –±–æ—Ç–µ\n\nüìÖ–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n/all - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ª—é–±–æ–π –¥–µ–Ω—å\n/today - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n/nextday - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞\n/calls - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤\n\nüìã–û—Ü–µ–Ω–∫–∏\n/grades - –í—Å–µ –æ—Ü–µ–Ω–∫–∏\n/wgrades - –û—Ü–µ–Ω–∫–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ\n/pgrades - –ß–µ—Ç–≤–µ—Ä—Ç–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏'
    bot.send_message(message.chat.id, msg, reply_markup=buttons(message))


@bot.message_handler(commands=['delacc'])
def deleteaccount(message):
    temp = db.get(message.chat.id)
    if temp != None:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton("–î–∞", callback_data='deleteacc1')
        b2 = types.InlineKeyboardButton(
            "–ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data='deleteacc0')
        markup.add(b1, b2)
        bot.send_message(message.chat.id, '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?',
                         reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg')
        markup.add(b1)
        bot.send_message(
            message.chat.id, '–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', reply_markup=markup)


@bot.message_handler(commands=['profile'])
def profile(message):
    temp = db.get(message.chat.id)
    if temp != None:
        d = dnevnik(temp)
        temp = d.profile()
        bot.send_message(message.chat.id, temp['user']['lastName']+" "+temp['user']['firstName']+" "+str(
            temp['classInfo']['number'])+temp['classInfo']['litera']+'\n\n–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç - /delacc')
    else:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg')
        markup.add(b1)
        bot.send_message(
            message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã', reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: True)
def callback_msg(callback):
    temp = db.get(callback.message.chat.id)
    if callback.data == 'reg':
        login(callback.message)
    elif callback.data == 'help':
        help(callback.message)
    elif temp != None:
        if 'schedule' in callback.data:
            bot.delete_message(callback.message.chat.id,
                               callback.message.message_id)
            schedule(callback.message, int(callback.data[-1]))
        if 'deleteacc' in callback.data:
            if callback.data[-1] == '1':
                markup = types.InlineKeyboardMarkup()
                b1 = types.InlineKeyboardButton(
                    "‚úèÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg')
                markup.add(b1)
                bot.send_message(callback.message.chat.id,
                                 '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω', reply_markup=markup)
                bot.delete_message(callback.message.chat.id,
                                   callback.message.message_id)
            else:
                bot.delete_message(callback.message.chat.id,
                                   callback.message.message_id)

        if 'grades' in callback.data:
            if callback.data[0] == 'p':
                bot.delete_message(callback.message.chat.id,
                                   callback.message.message_id)
                get_grades_period(callback.message, int(callback.data[-1]))
            if callback.data[0] == 'w':
                bot.delete_message(callback.message.chat.id,
                                   callback.message.message_id)
                get_grades_week(callback.message)
            if callback.data[0] == 'y':
                bot.delete_message(callback.message.chat.id,
                                   callback.message.message_id)
                get_grades_year(callback.message)
    else:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg')
        markup.add(b1)
        bot.send_message(callback.message.chat.id,
                         '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã', reply_markup=markup)


@bot.message_handler(commands=['calls'])
def calls(message):
    bot.send_message(message.chat.id, '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤\n\n1 ‚Ä¢ 8:30 - 9:10\n2 ‚Ä¢ 9:20 - 10:00\n3 ‚Ä¢ 10:20 - 11:00\n4 ‚Ä¢ 11:20 - 12:00\n5 ‚Ä¢ 12:20 - 13:00\n6 ‚Ä¢ 13:10 - 13:50\n7 ‚Ä¢ 14:05 - 14:45\n8 ‚Ä¢ 14.55 - 15:35')


@bot.message_handler(commands=['grades'])
def grades_select(message):
    temp = db.get(message.chat.id)
    if temp != None:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton(
            "–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", callback_data='wgrades')
        b2 = types.InlineKeyboardButton("1 —á–µ—Ç–≤–µ—Ä—Ç—å", callback_data='pgrades0')
        b3 = types.InlineKeyboardButton("2 —á–µ—Ç–≤–µ—Ä—Ç—å", callback_data='pgrades1')
        b4 = types.InlineKeyboardButton("3 —á–µ—Ç–≤–µ—Ä—Ç—å", callback_data='pgrades2')
        b5 = types.InlineKeyboardButton("4 —á–µ—Ç–≤–µ—Ä—Ç—å", callback_data='pgrades3')
        b6 = types.InlineKeyboardButton(
            "–ü–æ —á–µ—Ç–≤–µ—Ä—Ç—è–º", callback_data='ygrades')
        markup.add(b1).row(b2, b3).row(b4, b5).row(b6)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥',
                         reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg')
        markup.add(b1)
        bot.send_message(
            message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def text(message):
    temp = db.get(message.chat.id)
    if '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' in message.text:
        help(message)
    elif temp != None:
        if message.text == '–ù–∞ —Å–µ–≥–æ–¥–Ω—è' or message.text == '/today':
            schedule(message, datetime.now().weekday() % 6)
        elif message.text == '–ù–∞ –∑–∞–≤—Ç—Ä–∞' or message.text == '/nextday':
            schedule(message, (datetime.now().weekday()+1) % 6)
        elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ' in message.text or message.text == '/all':
            markup = types.InlineKeyboardMarkup()
            b1 = types.InlineKeyboardButton(
                "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data='schedule0')
            b2 = types.InlineKeyboardButton(
                "–í—Ç–æ—Ä–Ω–∏–∫", callback_data='schedule1')
            b3 = types.InlineKeyboardButton("–°—Ä–µ–¥–∞", callback_data='schedule2')
            b4 = types.InlineKeyboardButton(
                "–ß–µ—Ç–≤–µ—Ä–≥", callback_data='schedule3')
            b5 = types.InlineKeyboardButton(
                "–ü—è—Ç–Ω–∏—Ü–∞", callback_data='schedule4')
            b6 = types.InlineKeyboardButton(
                "–°—É–±–±–æ—Ç–∞", callback_data='schedule5')
            markup.add(b1, b2, b3, b4, b5, b6)
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å',
                             reply_markup=markup)
        elif '–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ' in message.text:
            get_grades_week(message)
        elif '–í—Å–µ –æ—Ü–µ–Ω–∫–∏' in message.text:
            grades_select(message)

    else:
        markup = types.InlineKeyboardMarkup()
        b1 = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data='reg')
        markup.add(b1)
        bot.send_message(
            message.chat.id, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã', reply_markup=markup)


bot.infinity_polling()
